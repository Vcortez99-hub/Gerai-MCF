const OpenAI = require('openai');
const fs = require('fs-extra');
const path = require('path');
const ConsistencyEngine = require('./ConsistencyEngine');

class OpenAIService {
  constructor() {
    this.provider = process.env.AI_PROVIDER || 'openai';

    // Inicializar Consistency Engine (baseado no benchmark presentations.ai)
    this.consistencyEngine = new ConsistencyEngine();

    if (this.provider === 'openai' && process.env.OPENAI_API_KEY) {
      this.openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY
      });
      this.model = process.env.OPENAI_MODEL || 'gpt-4o-mini';
    } else {
      // Fallback to simple AI if no OpenAI key
      this.provider = 'simple';
    }
  }

  async generateContent(briefing, config) {
    try {
      console.log('üéØ MODO ENTERPRISE: Gerando com ConsistencyEngine');

      // Usar ConsistencyEngine para garantir apresenta√ß√µes como presentations.ai
      const result = await this.consistencyEngine.generateConsistentPresentation(briefing, config);

      if (result.success) {
        console.log(`‚úÖ Apresenta√ß√£o gerada com score de consist√™ncia: ${result.consistencyScore}%`);
        return {
          success: true,
          data: {
            type: 'complete-html',
            html: result.htmlContent,
            htmlContent: result.htmlContent,
            title: 'Apresenta√ß√£o Enterprise',
            template: 'darede-enterprise',
            metadata: result.metadata,
            consistencyScore: result.consistencyScore,
            qualityScore: result.qualityScore,
            qualityStatus: result.qualityStatus
          }
        };
      } else {
        // Fallback para m√©todo original se ConsistencyEngine falhar
        console.log('‚ö†Ô∏è Fallback para gera√ß√£o OpenAI direta');
        const fallbackResult = await this.generateWithOpenAI(briefing, config);
        return {
          success: true,
          data: fallbackResult
        };
      }
    } catch (error) {
      console.error('‚ùå Erro cr√≠tico na gera√ß√£o de conte√∫do:', error);
      return {
        success: false,
        error: `Erro na gera√ß√£o enterprise: ${error.message}`
      };
    }
  }

  async generateWithOpenAI(briefing, config) {
    console.log('ü§ñ Gerando com OpenAI para briefing:', briefing.substring(0, 100) + '...');
    console.log('üéØ Modelo sendo usado:', this.model);

    const prompt = await this.buildPrompt(briefing, config);

    // Adicionar o briefing ao config para o parsing
    config.briefing = briefing;

    console.log('üìù Prompt length:', prompt.length, 'characters');

    // GPT-5 com configura√ß√µes m√≠nimas para funcionamento
    const response = await this.openai.chat.completions.create({
      model: this.model,
      messages: [
        {
          role: "system",
          content: "You are GPT-4o-mini, an advanced AI model. Create professional HTML presentations with complete, valid HTML documents. Generate full HTML structure with embedded CSS and JavaScript. Focus on modern design, responsive layout, and professional business presentations."
        },
        {
          role: "user",
          content: prompt
        }
      ]
    });

    console.log('üì¶ OpenAI response received, length:', response.choices[0].message.content.length);

    const content = response.choices[0].message.content;
    return this.parseAIResponse(content, config);
  }

  async buildPrompt(briefing, config) {
    const {
      templateType,
      company,
      audience,
      slideCount,
      tone,
      slideTopics,
      attachments,
      logoUrls
    } = config;

    // Estrutura espec√≠fica e obrigat√≥ria dos slides
    const totalSlides = parseInt(slideCount) || 6;
    let slideStructure = '\n\n**ESTRUTURA OBRIGAT√ìRIA DOS SLIDES:**\n';

    // Slide 1 - SEMPRE Capa
    slideStructure += `- Slide 1 (CAPA): T√≠tulo principal, subt√≠tulo, ${company || 'Empresa'}, logo e data\n`;

    // Slides de conte√∫do (2 at√© N-1)
    if (slideTopics && slideTopics.length > 0) {
      slideTopics.forEach(topic => {
        const slideNum = parseInt(topic.slideNumber) + 1; // +1 porque capa √© slide 1
        slideStructure += `- Slide ${slideNum}: ${topic.topic}\n`;
      });
    } else {
      // Estrutura padr√£o se n√£o tiver t√≥picos espec√≠ficos
      for (let i = 2; i < totalSlides; i++) {
        slideStructure += `- Slide ${i}: Conte√∫do ${i - 1}\n`;
      }
    }

    // √öltimo slide - SEMPRE Contracapa
    slideStructure += `- Slide ${totalSlides} (CONTRACAPA): Contato comercial da Darede (SEM agradecimentos)\n`;
    slideStructure += '\n‚ö†Ô∏è IMPORTANTE: Siga EXATAMENTE esta estrutura. Cada slide deve ser numerado sequencialmente.\n';

    // Informa√ß√µes sobre anexos
    let attachmentInfo = '';
    if (attachments && attachments.length > 0) {
      attachmentInfo = '\n\n**DADOS ANEXADOS PARA AN√ÅLISE:**\n';
      attachments.forEach((attachment, index) => {
        attachmentInfo += `${index + 1}. Arquivo de dados (${attachment.type})\n`;
        if (attachment.url && attachment.url.startsWith('data:')) {
          attachmentInfo += `   - Conte√∫do: ${attachment.url.substring(0, 300)}...\n`;
        }
      });
      attachmentInfo += 'üéØ IMPORTANTE: \n- Analise TODOS os dados com M√ÅXIMA PRECIS√ÉO matem√°tica\n- Some valores CORRETAMENTE sem erros - VERIFIQUE TODAS AS PLANILHAS E ABAS\n- Para Excel: examine cada c√©lula, linha e coluna com TOTAL PRECIS√ÉO\n- DUPLA VERIFICA√á√ÉO: Confira todas as somas e c√°lculos duas vezes\n- N√ÉO mencione nomes de arquivos na apresenta√ß√£o\n- Use apenas os DADOS e INSIGHTS dos arquivos\n';
    }

    // URLs de logos
    let logoInfo = '';
    if (logoUrls && logoUrls.length > 0) {
      logoInfo = '\n\n**LOGOS PARA INCLUIR:**\n';
      logoUrls.forEach((url, index) => {
        logoInfo += `- Logo ${index + 1}: ${url}\n`;
      });
      logoInfo += 'Inclua estes logos como parceiros/clientes na apresenta√ß√£o.\n';
    }

    // Build the prompt in logical chunks for better maintainability
    const objective = 'üéØ OBJETIVO: Crie uma apresenta√ß√£o HTML PROFISSIONAL usando o TEMPLATE DAREDE com ' + totalSlides + ' slides.\n\n';

    const briefingSection = 'BRIEFING DO PROJETO:\n' + briefing + '\n\n';

    const configSection = 'CONFIGURA√á√ÉO:\n' +
      '- P√∫blico-alvo: ' + (audience || 'Executivos') + '\n' +
      '- Total de slides: ' + totalSlides + slideStructure + attachmentInfo + logoInfo + '\n\n';

    const templateHeader = 'üé® **TEMPLATE DAREDE - VERS√ÉO PROFISSIONAL:**\n\n' +
      'Gere uma apresenta√ß√£o HTML completa usando:\n' +
      '- Font: Inter, sans-serif\n' +
      '- Cores: Verde (#1e5c3f), Laranja (#ff9500)\n' +
      '- Background: #ffffff\n' +
      '- Logo: https://lps-geral.s3.us-east-1.amazonaws.com/agente-ia-empresas/assets/logo-darede-white.png\n\n' +
      '‚ö†Ô∏è **CONTRASTE OBRIGAT√ìRIO:**\n' +
      '- Fundos brancos = texto escuro (#2c2c2c)\n' +
      '- Fundos coloridos = texto branco (#ffffff)\n' +
      '- NUNCA texto branco em fundo branco\n\n' +
      'üìã **ESTRUTURA DOS SLIDES:**\n' +
      'Slide 1: Capa com t√≠tulo e logo\n' +
      'Slides 2-N: Conte√∫do baseado no briefing\n' +
      'Slide final: Contato Darede\n\n' +
      'üöÄ **FORMATO FINAL:**\n' +
      'Retorne APENAS HTML completo v√°lido, sem markdown, usando o template Darede com navega√ß√£o e estilos responsivos.';

    return objective + briefingSection + configSection + templateHeader;
  }

  // Fun√ß√£o parseAIResponse est√° implementada na linha 1692

  // Fun√ß√£o generateSimple implementada na linha 1815

  // As fun√ß√µes parseAIResponse, extractTitleFromHTML, generateHTMLFallback est√£o implementadas abaixo

  // [C√ìDIGO HTML TEMPLATE REMOVIDO POR ESTAR CAUSANDO ERRO DE SINTAXE]

  // Todas as fun√ß√µes duplicadas foram removidas
  // As implementa√ß√µes corretas est√£o no final do arquivo

  // parseAIResponse implementado na linha 1692
  // extractTitleFromHTML implementado na linha 1737
  // generateHTMLFallback implementado na linha 1746
  // generateSimple implementado na linha 1815

    return objective + briefingSection + configSection + templateHeader;
  }

  parseAIResponse(response, config) {
    try {
      console.log('üîç Raw AI Response length:', response.length);

      // Limpar a resposta HTML - remover markdown se houver
      let cleanHTML = response
        .replace(/```html\n?|```\n?/g, '')
        .trim();

      // Verificar se √© HTML v√°lido
      if (!cleanHTML.startsWith('<!DOCTYPE html>') && !cleanHTML.startsWith('<html')) {
        // Tentar extrair HTML de dentro da resposta
        const htmlMatch = response.match(/<!DOCTYPE html>[\s\S]*<\/html>/i);
        if (htmlMatch) {
          cleanHTML = htmlMatch[0];
        } else {
          throw new Error('HTML n√£o encontrado na resposta');
        }
      }

      // Validar estrutura HTML b√°sica
      if (!cleanHTML.includes('<html') || !cleanHTML.includes('</html>')) {
        throw new Error('Estrutura HTML inv√°lida');
      }

      console.log('‚úÖ HTML v√°lido recebido, tamanho:', cleanHTML.length);

      // Retornar o HTML diretamente com metadata
      const result = {
        html: cleanHTML,
        title: this.extractTitleFromHTML(cleanHTML),
        generatedAt: new Date().toISOString(),
        config,
        provider: this.provider,
        model: this.model,
        type: 'complete-html'
      };

      return result;

    } catch (error) {
      console.error('‚ùå Erro ao parsear resposta HTML do OpenAI:', error.message);
      console.log('üìÑ Original response preview:', response.substring(0, 500) + '...');

      // Fallback para gera√ß√£o HTML simples
      console.log('üîÑ Usando fallback HTML...');
      return this.generateHTMLFallback(config);
    }
  }

  extractTitleFromHTML(html) {
    try {
      const titleMatch = html.match(/<title[^>]*>([^<]+)<\/title>/i);
      return titleMatch ? titleMatch[1] : 'Apresenta√ß√£o Gerada';
    } catch {
      return 'Apresenta√ß√£o Gerada';
    }
  }

  generateHTMLFallback(config) {
    const { company, audience, briefing } = config;
    const title = `Apresenta√ß√£o - ${company || 'Cliente'}`;

    const fallbackHTML = `<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title} | Darede</title>
    <style>
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #0A4F2C 0%, #11713F 50%, #1A8F4F 100%);
            color: #ffffff;
            margin: 0;
            padding: 40px;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            max-width: 1200px;
            text-align: center;
        }
        h1 {
            font-size: 3.5rem;
            font-weight: 800;
            margin-bottom: 20px;
            background: linear-gradient(135deg, #ffffff 0%, #e0e0e0 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .content {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            padding: 40px;
            margin-top: 30px;
        }
        .logo {
            height: 60px;
            margin-bottom: 30px;
        }
    </style>
</head>
<body>
    <div class="container">
        <img src="https://lps-geral.s3.us-east-1.amazonaws.com/agente-ia-empresas/assets/logo-darede-white.png" alt="Darede" class="logo">
        <h1>${title}</h1>
        <div class="content">
            <h2>Apresenta√ß√£o OpenAI em Desenvolvimento</h2>
            <p>Esta √© uma apresenta√ß√£o personalizada gerada com OpenAI GPT-4o-mini.</p>
            <p><strong>Empresa:</strong> ${company || 'Cliente'}</p>
            <p><strong>P√∫blico:</strong> ${audience || 'Executivos'}</p>
            ${briefing ? `<p><strong>Briefing:</strong> ${briefing.substring(0, 200)}...</p>` : ''}
        </div>
    </div>
</body>
</html>`;

    return {
      html: fallbackHTML,
      title,
      generatedAt: new Date().toISOString(),
      config,
      provider: 'openai-fallback',
      type: 'complete-html'
    };
  }

  generateSimple(briefing, config) {
    console.log('ü§ñ Gerando conte√∫do com OpenAI simples para:', briefing.substring(0, 100));

    const words = briefing.toLowerCase().split(' ');
    const slideCount = parseInt(config.slideCount) || 6;

    // An√°lise inteligente do briefing para gerar t√≠tulo espec√≠fico
    let title = "Apresenta√ß√£o Personalizada";

    // Detecta temas espec√≠ficos no briefing
    if (words.includes('vendas') || words.includes('comercial')) {
      title = "Estrat√©gia Comercial Inovadora";
    } else if (words.includes('marketing') || words.includes('digital')) {
      title = "Estrat√©gia de Marketing Digital";
    } else if (words.includes('tecnologia') || words.includes('transforma√ß√£o')) {
      title = "Transforma√ß√£o Digital Empresarial";
    } else {
      // Usa as primeiras palavras significativas do briefing
      const significantWords = briefing.split(' ').filter(word =>
        word.length > 3 &&
        !['para', 'sobre', 'como', 'quando', 'onde', 'porque', 'esta', 'esse', 'essa'].includes(word.toLowerCase())
      ).slice(0, 3);

      if (significantWords.length > 0) {
        title = significantWords.join(' ') + ' - Estrat√©gia Empresarial';
      }
    }

    console.log('üìù T√≠tulo gerado:', title);

    // Para compatibilidade, retornar formato de HTML gerado
    const fallbackHTML = this.generateHTMLFallback({
      company: config.company,
      audience: config.audience,
      briefing: briefing
    });

    return {
      title: fallbackHTML.title,
      html: fallbackHTML.html,
      type: 'complete-html',
      slideCount,
      generatedAt: new Date().toISOString(),
      config,
      provider: 'openai-simple-fallback'
    };
  }
}

module.exports = OpenAIService;